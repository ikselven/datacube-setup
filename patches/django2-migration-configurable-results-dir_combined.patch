diff --git a/.gitignore b/.gitignore
index 2a977a0..182a7b4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,4 @@ apps/*/__pycache__/
 */__pycache__/
 data_cube_ui/migrations/
 data_cube_ui/__pycache__/
+.idea
diff --git a/apps/accounts/views.py b/apps/accounts/views.py
index 1dde884..abb6e09 100755
--- a/apps/accounts/views.py
+++ b/apps/accounts/views.py
@@ -231,8 +231,8 @@ def registration(request):
                 # It is possible to use msg.add_alternative() to add HTML content too
                 html_content = ""
                 activation_url = settings.BASE_HOST + "/accounts/" + str(activation.url) + "/activate"
-                with open('/home/' + settings.LOCAL_USER +
-                          '/Datacube/data_cube_ui/static/assets/media/email_template.html') as f:
+                from os import path
+                with open(path.join(settings.BASE_DIR, 'static/assets/media/email_template.html')) as f:
                     for line in f:
                         if (line == "\t\t\tAVAILABLE_TOOLS\n"):
                             for app in Application.objects.all():
@@ -249,7 +249,7 @@ def registration(request):
                 html_content = html_content.replace("ACTIVATION_URL", activation_url)
                 msg.add_alternative(html_content, subtype='html')
                 # Attaching content:
-                fp = open('/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/static/assets/media/banner.png',
+                fp = open(path.join(settings.BASE_DIR, 'static/assets/media/banner.png'),
                           'rb')
                 att = MIMEImage(fp.read())  # Or use MIMEImage, etc
                 fp.close()
@@ -281,7 +281,7 @@ def registration(request):
         context = {'title': _("Registration"), 'form': RegistrationForm(),}
         if request.GET:
             next = request.POST.get('next', "/")
-            if request.user.is_authenticated():
+            if request.user.is_authenticated:
                 return redirect(next)
             context['next'] = next
         return render(request, 'registration/registration.html', context)
@@ -337,7 +337,7 @@ def login(request):
         context = {'title': _("Log in"), 'form': LoginForm() }
         if request.GET:
             next = request.GET.get('next', "/")
-            if request.user.is_authenticated():
+            if request.user.is_authenticated:
                 return redirect(next)
             context['next'] = next
         return render(request, 'registration/login.html', context)
diff --git a/apps/cloud_coverage/models.py b/apps/cloud_coverage/models.py
index aed81ec..e17742d 100644
--- a/apps/cloud_coverage/models.py
+++ b/apps/cloud_coverage/models.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.db import models
 from django.core.exceptions import ValidationError
@@ -61,8 +62,8 @@ class Query(BaseQuery):
 
     """
 
-    color_scale_path = '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/cloud_coverage'
-    base_result_dir = '/datacube/ui_results/cloud_coverage'
+    color_scale_path = os.path.join(settings.BASE_DIR, 'utils/color_scales/cloud_coverage')
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'cloud_coverage')
 
     class Meta(BaseQuery.Meta):
         unique_together = (('satellite', 'area_id', 'time_start', 'time_end', 'latitude_max', 'latitude_min',
diff --git a/apps/coastal_change/models.py b/apps/coastal_change/models.py
index 9155239..af8a3de 100755
--- a/apps/coastal_change/models.py
+++ b/apps/coastal_change/models.py
@@ -18,7 +18,9 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
+from django.conf import settings
 from django.db import models
 from django.core.exceptions import ValidationError
 
@@ -72,9 +74,9 @@ class Query(BaseQuery):
     time_end = models.IntegerField()
     time_start = models.IntegerField()
 
-    animated_product = models.ForeignKey(AnimationType)
+    animated_product = models.ForeignKey(AnimationType, on_delete=models.CASCADE)
 
-    base_result_dir = '/datacube/ui_results/coastal_change'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'coastal_change')
 
     class Meta(BaseQuery.Meta):
         unique_together = (('satellite', 'area_id', 'time_start', 'time_end', 'latitude_max', 'latitude_min',
diff --git a/apps/custom_mosaic_tool/models.py b/apps/custom_mosaic_tool/models.py
index e80a3a2..d67b625 100755
--- a/apps/custom_mosaic_tool/models.py
+++ b/apps/custom_mosaic_tool/models.py
@@ -18,7 +18,9 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
+from django.conf import settings
 from django.db import models
 from django.core.exceptions import ValidationError
 
@@ -79,11 +81,11 @@ class Query(BaseQuery):
     foreign keys should define __str__ for a human readable name.
 
     """
-    query_type = models.ForeignKey(ResultType)
-    animated_product = models.ForeignKey(AnimationType)
-    compositor = models.ForeignKey(Compositor)
+    query_type = models.ForeignKey(ResultType, on_delete=models.CASCADE)
+    animated_product = models.ForeignKey(AnimationType, on_delete=models.CASCADE)
+    compositor = models.ForeignKey(Compositor, on_delete=models.CASCADE)
 
-    base_result_dir = '/datacube/ui_results/custom_mosaic_tool'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'custom_mosaic_tool')
 
     class Meta(BaseQuery.Meta):
         unique_together = (
diff --git a/apps/data_cube_manager/tasks.py b/apps/data_cube_manager/tasks.py
index 852fecd..abf708c 100644
--- a/apps/data_cube_manager/tasks.py
+++ b/apps/data_cube_manager/tasks.py
@@ -64,7 +64,7 @@ def update_data_cube_details(ingested_only=True):
     dataset_types = DatasetType.objects.using('agdc').filter(
         Q(definition__has_keys=['managed']) & Q(definition__has_keys=['measurements']))
 
-    dc = DataAccessApi(config='/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/config/.datacube.conf')
+    dc = DataAccessApi(config=os.path.join(settings.BASE_DIR, 'config/.datacube.conf'))
 
     for dataset_type in dataset_types:
         ingestion_details, created = IngestionDetails.objects.get_or_create(
@@ -86,7 +86,7 @@ def run_ingestion(ingestion_definition):
     Returns:
         The primary key of the new dataset type.
     """
-    conf_path = '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/config/.datacube.conf'
+    conf_path = os.path.join(settings.BASE_DIR, 'config/.datacube.conf')
     index = index_connect(local_config=LocalConfig.find([conf_path]))
 
     source_type, output_type = ingest.make_output_type(index, ingestion_definition)
@@ -104,7 +104,7 @@ def ingestion_work(output_type, source_type, ingestion_definition):
         output_type, source_type: types produced by ingest.make_output_type
         ingestion_definition: dict representing a Data Cube ingestion def produced using the utils func.
     """
-    conf_path = '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/config/.datacube.conf'
+    conf_path = os.path.join(settings.BASE_DIR, 'config/.datacube.conf')
     index = index_connect(local_config=LocalConfig.find([conf_path]))
 
     tasks = ingest.create_task_list(index, output_type, None, source_type, ingestion_definition)
diff --git a/apps/data_cube_manager/views/dataset_type.py b/apps/data_cube_manager/views/dataset_type.py
index 8107005..abd5d38 100644
--- a/apps/data_cube_manager/views/dataset_type.py
+++ b/apps/data_cube_manager/views/dataset_type.py
@@ -108,7 +108,7 @@ class DatasetTypeView(View):
         #since everything is valid, now create yaml from defs..
         product_def = utils.dataset_type_definition_from_forms(metadata_form, measurement_forms)
 
-        conf_path = '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/config/.datacube.conf'
+        conf_path = os.path.join(settings.BASE_DIR, 'config/.datacube.conf')
         index = index_connect(local_config=conf_path)
         try:
             type_ = index.products.from_doc(product_def)
@@ -154,7 +154,7 @@ class DatasetYamlExport(View):
         #since everything is valid, now create yaml from defs..
         product_def = utils.dataset_type_definition_from_forms(metadata_form, measurement_forms)
         try:
-            os.makedirs('/datacube/ui_results/data_cube_manager/product_defs/')
+            os.makedirs(os.path.join(settings.RESULTS_DATA_DIR, 'data_cube_manager/product_defs/'))
         except:
             pass
 
@@ -163,7 +163,8 @@ class DatasetYamlExport(View):
 
         yaml.SafeDumper.add_representer(OrderedDict, _dict_representer)
 
-        yaml_url = '/datacube/ui_results/data_cube_manager/product_defs/' + str(uuid.uuid4()) + '.yaml'
+        yaml_url = os.path.join(settings.RESULTS_DATA_DIR, 'data_cube_manager/product_defs/') \
+            + str(uuid.uuid4()) + '.yaml'
         with open(yaml_url, 'w') as yaml_file:
             yaml.dump(product_def, yaml_file, Dumper=yaml.SafeDumper, default_flow_style=False, indent=4)
         return JsonResponse({'status': 'OK', 'url': yaml_url})
diff --git a/apps/data_cube_manager/views/ingestion.py b/apps/data_cube_manager/views/ingestion.py
index 612e735..fd504c3 100644
--- a/apps/data_cube_manager/views/ingestion.py
+++ b/apps/data_cube_manager/views/ingestion.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.shortcuts import render, redirect
 from django.http import HttpResponse, JsonResponse
@@ -103,7 +104,7 @@ class CreateIngestionConfigurationView(View):
         ingestion_def = utils.ingestion_definition_from_forms(metadata_form, storage_form, ingestion_bounds_form,
                                                               measurement_forms)
         try:
-            os.makedirs('/datacube/ui_results/data_cube_manager/ingestion_configurations/')
+            os.makedirs(os.path.join(settings.RESULTS_DATA_DIR, 'data_cube_manager/ingestion_configurations/'))
         except:
             pass
 
@@ -112,7 +113,8 @@ class CreateIngestionConfigurationView(View):
 
         yaml.SafeDumper.add_representer(OrderedDict, _dict_representer)
 
-        yaml_url = '/datacube/ui_results/data_cube_manager/ingestion_configurations/' + str(uuid.uuid4()) + '.yaml'
+        yaml_url = os.path.join(settings.RESULTS_DATA_DIR, 'data_cube_manager/ingestion_configurations/') \
+            + str(uuid.uuid4()) + '.yaml'
         with open(yaml_url, 'w') as yaml_file:
             yaml.dump(ingestion_def, yaml_file, Dumper=yaml.SafeDumper, default_flow_style=False, indent=4)
         return JsonResponse({'status': 'OK', 'url': yaml_url})
@@ -289,7 +291,7 @@ class CreateDataCubeSubset(View):
             'description':
             "Sample subset of {} created for {}".format(dataset_type.name, request.user.username),
             'location':
-            "/datacube/ingested_data/{}".format(request.user.username),
+            os.path.join(os.path.dirname(settings.RESULTS_DATA_DIR), "ingested_data/{}".format(request.user.username)),
             'file_path_template':
             "SAMPLE_CUBE_4326_{tile_index[0]}_{tile_index[1]}_{start_time}.nc",
             'summary':
diff --git a/apps/dc_algorithm/management/commands/band_math_app/models.py b/apps/dc_algorithm/management/commands/band_math_app/models.py
index 3e5c42c..2cc9c72 100644
--- a/apps/dc_algorithm/management/commands/band_math_app/models.py
+++ b/apps/dc_algorithm/management/commands/band_math_app/models.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.db import models
 from django.core.exceptions import ValidationError
@@ -59,11 +60,11 @@ class Query(BaseQuery):
     foreign keys should define __str__ for a human readable name.
 
     """
-    compositor = models.ForeignKey(Compositor)
+    compositor = models.ForeignKey(Compositor, on_delete=models.CASCADE)
 
     #TODO: add color scale here
-    color_scale_path = '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/default_color_scale'
-    base_result_dir = '/datacube/ui_results/band_math_app'
+    color_scale_path = os.path.join(settings.BASE_DIR, 'utils/color_scales/default_color_scale')
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'band_math_app')
 
     class Meta(BaseQuery.Meta):
         unique_together = (('satellite', 'area_id', 'time_start', 'time_end', 'latitude_max', 'latitude_min',
diff --git a/apps/dc_algorithm/management/commands/base_app/models.py b/apps/dc_algorithm/management/commands/base_app/models.py
index c42919e..dc2fba7 100644
--- a/apps/dc_algorithm/management/commands/base_app/models.py
+++ b/apps/dc_algorithm/management/commands/base_app/models.py
@@ -18,7 +18,9 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
+from django.conf import settings
 from django.db import models
 from django.core.exceptions import ValidationError
 
@@ -87,12 +89,12 @@ class Query(BaseQuery):
     """
 
     # TODO: Are there querytypes, animation types, or compositors that need to be distinguished?
-    query_type = models.ForeignKey(ResultType)
-    animated_product = models.ForeignKey(AnimationType)
-    compositor = models.ForeignKey(Compositor)
+    query_type = models.ForeignKey(ResultType, on_delete=models.CASCADE)
+    animated_product = models.ForeignKey(AnimationType, on_delete=models.CASCADE)
+    compositor = models.ForeignKey(Compositor, on_delete=models.CASCADE)
 
     # TODO: Fill out the configuration paths
-    base_result_dir = '/datacube/ui_results/app_name'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'app_name')
 
     class Meta(BaseQuery.Meta):
         unique_together = (
diff --git a/apps/dc_algorithm/models/abstract_base_models.py b/apps/dc_algorithm/models/abstract_base_models.py
index 147dad9..2245e2a 100644
--- a/apps/dc_algorithm/models/abstract_base_models.py
+++ b/apps/dc_algorithm/models/abstract_base_models.py
@@ -65,7 +65,7 @@ class Query(models.Model):
 
     area_id = models.CharField(max_length=100)
 
-    satellite = models.ForeignKey('dc_algorithm.Satellite')
+    satellite = models.ForeignKey('dc_algorithm.Satellite', on_delete=models.CASCADE)
 
     time_start = models.DateField('time_start')
     time_end = models.DateField('time_end')
@@ -79,7 +79,7 @@ class Query(models.Model):
     #false by default, only change is false-> true
     complete = models.BooleanField(default=False)
 
-    config_path = '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/config/.datacube.conf'
+    config_path = os.path.join(settings.BASE_DIR, 'config/.datacube.conf')
 
     class Meta:
         abstract = True
diff --git a/apps/dc_algorithm/models/application_models.py b/apps/dc_algorithm/models/application_models.py
index b3f9025..73af008 100644
--- a/apps/dc_algorithm/models/application_models.py
+++ b/apps/dc_algorithm/models/application_models.py
@@ -207,7 +207,7 @@ class Application(models.Model):
 
     color_scale = models.CharField(max_length=250, default="", blank=True, null=True)
 
-    application_group = models.ForeignKey('ApplicationGroup', null=True, blank=True)
+    application_group = models.ForeignKey('ApplicationGroup', on_delete=models.CASCADE, null=True, blank=True)
 
     def __str__(self):
         return self.id
diff --git a/apps/dc_algorithm/views.py b/apps/dc_algorithm/views.py
index 115261f..ddb558e 100644
--- a/apps/dc_algorithm/views.py
+++ b/apps/dc_algorithm/views.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.shortcuts import render
 from django.utils.decorators import method_decorator
@@ -26,6 +27,7 @@ from django.http import HttpResponse, JsonResponse
 from django.forms.models import model_to_dict
 from django.views import View
 from django.apps import apps
+from django.conf import settings
 
 from .models import Application, Satellite, Area
 
@@ -620,6 +622,20 @@ class GetTaskResult(View, ToolClass):
 
     """
 
+    def _rewrite_path(self, path):
+        """Rewrites a path that is stored in the database to something the web server can serve
+
+        Args:
+            path to rewrite
+
+        Returns:
+            A String containing a web server friendly path
+        """
+        if path.startswith(settings.RESULTS_DATA_DIR):
+            stripped_path = path.replace(settings.RESULTS_DATA_DIR, '', 1).lstrip(os.path.sep)
+            path = os.path.join(os.path.sep, "datacube", "ui_results", stripped_path)
+        return path
+
     def get(self, request):
         """Get a JsonResponse containing a status and Task model if complete
 
@@ -643,7 +659,13 @@ class GetTaskResult(View, ToolClass):
         try:
             requested_task = task_model.objects.get(pk=request.GET['id'])
             if requested_task.status == "OK" and requested_task.complete:
-                response.update(model_to_dict(requested_task))
+                payload = model_to_dict(requested_task)
+
+                for key in payload.keys():
+                    if key.endswith("_path"):
+                        payload[key] = self._rewrite_path(payload[key])
+
+                response.update(payload)
                 response['status'] = "OK"
             elif requested_task.status == "ERROR":
                 response['status'] = "ERROR"
diff --git a/apps/fractional_cover/models.py b/apps/fractional_cover/models.py
index 9934b24..c1a740d 100755
--- a/apps/fractional_cover/models.py
+++ b/apps/fractional_cover/models.py
@@ -18,7 +18,9 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
+from django.conf import settings
 from django.db import models
 from django.core.exceptions import ValidationError
 
@@ -58,9 +60,9 @@ class Query(BaseQuery):
     foreign keys should define __str__ for a human readable name.
 
     """
-    compositor = models.ForeignKey(Compositor)
+    compositor = models.ForeignKey(Compositor, on_delete=models.CASCADE)
 
-    base_result_dir = '/datacube/ui_results/fractional_cover'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'fractional_cover')
 
     class Meta(BaseQuery.Meta):
         unique_together = (('satellite', 'area_id', 'time_start', 'time_end', 'latitude_max', 'latitude_min',
diff --git a/apps/ndvi_anomaly/models.py b/apps/ndvi_anomaly/models.py
index 7e27892..c99bfad 100755
--- a/apps/ndvi_anomaly/models.py
+++ b/apps/ndvi_anomaly/models.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.db import models
 from django.core.exceptions import ValidationError
@@ -61,16 +62,16 @@ class Query(BaseQuery):
     """
     baseline_selection = models.CharField(max_length=100, default="1,2,3,4,5,6,7,8,9,10,11,12")
 
-    base_result_dir = '/datacube/ui_results/ndvi_anomaly'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'ndvi_anomaly')
     color_scales = {
         'baseline_ndvi':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ndvi',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/ndvi'),
         'scene_ndvi':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ndvi',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/ndvi'),
         'ndvi_difference':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ndvi_difference',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/ndvi_difference'),
         'ndvi_percentage_change':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ndvi_percentage_change'
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/ndvi_percentage_change')
     }
 
     class Meta(BaseQuery.Meta):
diff --git a/apps/slip/models.py b/apps/slip/models.py
index 7800fd6..3a9be19 100755
--- a/apps/slip/models.py
+++ b/apps/slip/models.py
@@ -18,7 +18,9 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
+from django.conf import settings
 from django.db import models
 from django.core.exceptions import ValidationError
 
@@ -71,10 +73,10 @@ class Query(BaseQuery):
 
     """
 
-    baseline_method = models.ForeignKey(BaselineMethod)
+    baseline_method = models.ForeignKey(BaselineMethod, on_delete=models.CASCADE)
     baseline_length = models.IntegerField(default=10)
 
-    base_result_dir = '/datacube/ui_results/slip'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'slip')
 
     class Meta(BaseQuery.Meta):
         unique_together = (
diff --git a/apps/spectral_indices/models.py b/apps/spectral_indices/models.py
index e73f90e..8a1781f 100644
--- a/apps/spectral_indices/models.py
+++ b/apps/spectral_indices/models.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.db import models
 from django.core.exceptions import ValidationError
@@ -67,20 +68,20 @@ class Query(BaseQuery):
     foreign keys should define __str__ for a human readable name.
 
     """
-    compositor = models.ForeignKey(Compositor)
-    query_type = models.ForeignKey(ResultType)
+    compositor = models.ForeignKey(Compositor, on_delete=models.CASCADE)
+    query_type = models.ForeignKey(ResultType, on_delete=models.CASCADE)
 
     color_scale_path = {
-        'ndvi': '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ndvi',
-        'evi': '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/evi',
-        'savi': '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ryg',
-        'nbr': '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ryg',
-        'nbr2': '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ryg',
-        'ndwi': '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ryg',
-        'ndbi': '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/ryg',
+        'ndvi': os.path.join(settings.BASE_DIR, 'utils/color_scales/ndvi'),
+        'evi':  os.path.join(settings.BASE_DIR, 'utils/color_scales/evi'),
+        'savi': os.path.join(settings.BASE_DIR, 'utils/color_scales/ryg'),
+        'nbr':  os.path.join(settings.BASE_DIR, 'utils/color_scales/ryg'),
+        'nbr2': os.path.join(settings.BASE_DIR, 'utils/color_scales/ryg'),
+        'ndwi': os.path.join(settings.BASE_DIR, 'utils/color_scales/ryg'),
+        'ndbi': os.path.join(settings.BASE_DIR, 'utils/color_scales/ryg'),
     }
 
-    base_result_dir = '/datacube/ui_results/spectral_indices'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'spectral_indices')
 
     class Meta(BaseQuery.Meta):
         unique_together = (('satellite', 'area_id', 'time_start', 'time_end', 'latitude_max', 'latitude_min',
diff --git a/apps/tsm/models.py b/apps/tsm/models.py
index 8abe227..1dd8db1 100755
--- a/apps/tsm/models.py
+++ b/apps/tsm/models.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.db import models
 from django.core.exceptions import ValidationError
@@ -77,26 +78,26 @@ class Query(BaseQuery):
 
     """
 
-    query_type = models.ForeignKey(ResultType)
-    animated_product = models.ForeignKey(AnimationType)
+    query_type = models.ForeignKey(ResultType, on_delete=models.CASCADE)
+    animated_product = models.ForeignKey(AnimationType, on_delete=models.CASCADE)
 
-    base_result_dir = '/datacube/ui_results/tsm'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'tsm')
 
     color_scales = {
         'wofs':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/water_percentage_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/water_percentage_binned'),
         'tsm':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/tsm_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/tsm_binned'),
         'normalized_data':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/tsm_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/tsm_binned'),
         'max':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/tsm_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/tsm_binned'),
         'min':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/tsm_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/tsm_binned'),
         'variability':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/tsm_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/tsm_binned'),
         'total_clean':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/clear_observations_binned'
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/clear_observations_binned')
     }
 
     class Meta(BaseQuery.Meta):
diff --git a/apps/urbanization/models.py b/apps/urbanization/models.py
index d4aa3eb..6e671b2 100644
--- a/apps/urbanization/models.py
+++ b/apps/urbanization/models.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.db import models
 from django.core.exceptions import ValidationError
@@ -59,9 +60,9 @@ class Query(BaseQuery):
     foreign keys should define __str__ for a human readable name.
 
     """
-    compositor = models.ForeignKey(Compositor)
+    compositor = models.ForeignKey(Compositor, on_delete=models.CASCADE)
 
-    base_result_dir = '/datacube/ui_results/urbanization'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'urbanization')
 
     class Meta(BaseQuery.Meta):
         unique_together = (('satellite', 'area_id', 'time_start', 'time_end', 'latitude_max', 'latitude_min',
diff --git a/apps/water_detection/models.py b/apps/water_detection/models.py
index 2917d25..a28bb36 100755
--- a/apps/water_detection/models.py
+++ b/apps/water_detection/models.py
@@ -18,6 +18,7 @@
 # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 # License for the specific language governing permissions and limitations
 # under the License.
+import os
 
 from django.db import models
 from django.core.exceptions import ValidationError
@@ -76,19 +77,19 @@ class Query(BaseQuery):
 
     """
 
-    query_type = models.ForeignKey(ResultType)
-    animated_product = models.ForeignKey(AnimationType)
+    query_type = models.ForeignKey(ResultType, on_delete=models.CASCADE)
+    animated_product = models.ForeignKey(AnimationType, on_delete=models.CASCADE)
 
-    base_result_dir = '/datacube/ui_results/water_detection'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'water_detection')
     color_scales = {
         'wofs':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/water_percentage_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/water_percentage_binned'),
         'normalized_data':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/water_percentage_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/water_percentage_binned'),
         'total_data':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/water_observations_binned',
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/water_observations_binned'),
         'total_clean':
-        '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/utils/color_scales/clear_observations_binned'
+        os.path.join(settings.BASE_DIR, 'utils/color_scales/clear_observations_binned')
     }
 
     class Meta(BaseQuery.Meta):
diff --git a/data_cube_ui/settings.py b/data_cube_ui/settings.py
index 3cc7a6c..5d8cd98 100755
--- a/data_cube_ui/settings.py
+++ b/data_cube_ui/settings.py
@@ -57,6 +57,8 @@ EMAIL_PORT = '25'
 
 LOCAL_USER = "localuser"
 
+RESULTS_DATA_DIR = "/home/developer/datacube/data/ui_results"
+
 INSTALLED_APPS = [
     'apps.custom_mosaic_tool',
     'apps.water_detection',
@@ -83,13 +85,12 @@ INSTALLED_APPS = [
     'bootstrap3',
 ]
 
-MIDDLEWARE_CLASSES = [
+MIDDLEWARE = [
     'django.middleware.security.SecurityMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.common.CommonMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
-    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
 ]
@@ -190,7 +191,7 @@ STATIC_URL = '/static/'
 STATIC_ROOT = '/static/'
 
 STATICFILES_DIRS = [
-    '/home/' + LOCAL_USER + '/Datacube/data_cube_ui/static',
+    os.path.join(BASE_DIR, 'static'),
 ]
 
 # CELERY STUFF
diff --git a/docs/adding_new_pages.md b/docs/adding_new_pages.md
index 3125258..1717e01 100644
--- a/docs/adding_new_pages.md
+++ b/docs/adding_new_pages.md
@@ -73,9 +73,9 @@ class Query(BaseQuery):
 
     animated_product = models.ForeignKey(AnimationType)
 
-    config_path = '/home/' + settings.LOCAL_USER + '/Datacube/data_cube_ui/config/.datacube.conf'
+    config_path = os.path.join(settings.BASE_DIR, 'data_cube_ui/config/.datacube.conf')
     measurements = ['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'cf_mask']
-    base_result_dir = '/datacube/ui_results/coastal_change'
+    base_result_dir = os.path.join(settings.RESULTS_DATA_DIR, 'coastal_change')
 
     class Meta(BaseQuery.Meta):
         unique_together = (('platform', 'area_id', 'time_start', 'time_end', 'latitude_max', 'latitude_min', 'longitude_max',
diff --git a/utils b/utils
--- a/utils
+++ b/utils
@@ -1 +1 @@
-Subproject commit 7301647f80777f6fbb36bc503178480ae6a9d5b0
+Subproject commit 7301647f80777f6fbb36bc503178480ae6a9d5b0-dirty
